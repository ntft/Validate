■Validateクラスについて

Validateクラスは、フォームから入力された内容などをバリデーション(検証)するためのクラスです。
コントロール(テキストボックスやチェックボックス)に対して、
バリデーションのルールを登録し、検証します。
ルールには「必須入力」「ひらがな」などがあり、自分で新しくルールを作ることも出来ます。

[ルール]
必須入力			：入力されているか検証します。
文字列長			：文字列長が最小値、最大値の範囲内か検証します。
Byte長				：Byte長が最小値、最大値の範囲内か検証します。
数値				：数値形式であるか検証します。
整数				：整数形式であるか検証します。
全角文字			：全角文字であるか検証します。
半角文字			：半角文字であるか検証します。
ひらがな			：ひらがなであるか検証します。
全角・半角カタカナ	：全角、半角、または全角・半角カタカナか検証します。
日付				：日付形式であるか検証します。
時刻				：時刻形式であるか検証します。
電話番号			：固定、携帯、固定・携帯電話番号形式か検証します。
郵便番号			：郵便番号形式か検証します。(オプションで存在検証)
メールアドレス		：メールアドレス形式か検証します。
クレジットカード番号：クレジットカード番号形式か検証します。
正規表現			：指定した正規表現にマッチするか検証します。
選択				：指定の値から選択されたか検証します。
比較				：指定の値が指定の比較方式に適合するか検証します。

使い方については「./sample.php」を参照してください。


■ディレクトリ構成

./ReadMe.txt					本ファイル
./validate.php					Validateクラス本体
./sample.php					使い方を説明したサンプルファイル
./message.ini					バリデーションメッセージを記述したファイル

./rules/						ルールディレクトリ
./rules/base_rule.php			基底ルールクラス
./rules/required.php			必須入力ルールクラス
./rules/length.php				文字列長ルールクラス
./rules/byte.php				Byte長ルールクラス
./rules/number.php				数値ルールクラス
./rules/integer.php				整数ルールクラス
./rules/multi.php				全角文字ルールクラス
./rules/single.php				半角文字ルールクラス
./rules/hiragana.php			ひらがなルールクラス
./rules/katakana.php			全角・半角カタカナルールクラス
./rules/date.php				日付ルールクラス
./rules/time.php				時刻ルールクラス
./rules/tel.php					電話番号ルールクラス
./rules/zip.php					郵便番号ルールクラス
./rules/mail.php				メールアドレスルールクラス
./rules/credit.php				クレジットカード番号ルールクラス
./rules/regular_expression.php	正規表現ルールクラス
./rules/select.php				選択ルールクラス
./rules/comparison.php			比較ルールクラス

./rules/zip/Zip.php				郵便番号クラス

./document/html/index.html		HTMLドキュメント


■新しくルールを追加する方法

1. rulesディレクトリに追加するルールのクラスファイルを作成する。
   (必須入力クラス required.php あたりをコピーすると良い)
   作成するファイル名はルール名をスネークケース(※a)で表現したものにすること。

   ※a：小文字で単語間をアンダーバー(_)で区切る形式。
   　例) snake_case.php

2. 1で作成したファイルのクラス名を「Rule」+ ルール名のキャメルケース(※b)にし、
   base_rule.php の RuleBaseクラスを継承する。
   
   ※b：複合語をひと綴りとして、要素語の最初を大文字で書き表す形式。
   　例) CamelCase, RuleCamelCase

3. public メソッド run() をオーバーライド(定義)し、このメソッド内で検証を行う。
   ルールに沿っていれば「TRUE」を返し、そうでなければエラーメッセージを返すようにする。
   
   エラーメッセージは「./message.ini」ファイルにルールのセクションを設け、定義する。
   「./message.ini」ファイルは基底クラスのコンストラクタで読み込まれるため、
   個別に読み込む必要はない。($this->inies)

ex. 各ルールクラスの「$this->value」にaddRule()で指定したnameのvalue値が代入される。

	$validate->addRule('txt_length', 'length', array('min' => 5, 'max' => 10));

	上記の場合だと、name値が'txt_length'のvalue値になる(コンストラクタにPOSTなどを指定した場合)。

	「$this->infos」は、第3引数以降の値を持つ。
	上記の場合だと「array('min' => 5, 'max' => 10)」。
	既存のルールでは第4引数は使用していないので(拡張用)実質、第3引数ということになる。
	「$this->infos」は、常に配列であるとは限らないので、
	使用する前に1度、var_dump()して確認することをおすすめする。